AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: "Stack for the Data Processing on AWS workshop"
Parameters:
    Module:
        Type: String
        Default: "data-processing-workshop"
    Environment:
        Type: String
        AllowedValues:
            - "development"
            - "acceptance"
            - "staging"
            - "qa"
            - "production"
    UniqueIdentifier:
        Type: String
        Description: "Stack Identifier"

Resources:
################################ S3 ############################################
    RawBucket:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: !Sub "raw-bucket-${Environment}-${UniqueIdentifier}"
            Tags:
                - Key: "Environment"
                  Value: !Ref Environment
                - Key: "Module"
                  Value: !Ref Module
    RefinedBucket:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: !Sub "refined-bucket-${Environment}-${UniqueIdentifier}"
            Tags:
                - Key: "Environment"
                  Value: !Ref Environment
                - Key: "Module"
                  Value: !Ref Module
    CuratedBucket:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: !Sub "curated-bucket-${Environment}-${UniqueIdentifier}"
            NotificationConfiguration:
                EventBridgeConfiguration:
                    EventBridgeEnabled: true
            Tags:
                - Key: "Environment"
                  Value: !Ref Environment
                - Key: "Module"
                  Value: !Ref Module
################################ Lambda ########################################
    ProcessDataFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: lambdas/data-processor/
            FunctionName: !Sub "process-data-${UniqueIdentifier}"
            Handler:
                data_processor.lambda_handler
            Runtime: python3.10
            Role: !GetAtt LambdaRole.Arn
            Environment:
                Variables:
                    REGION: !Ref "AWS::Region"
            Events:
                InferenceEvent:
                    Type: "HttpApi"
                    Properties:
                        ApiId: !Ref RestApi
                        Method: POST
                        Path: /log
                        TimeoutInMillis: 15000
                        PayloadFormatVersion: "2.0"
                        Auth:
                            ApiKeyRequired: true
            Tags:
                Environment: !Ref Environment
                Module: !Ref Module
    LambdaRole:
        Type: AWS::IAM::Role
        Properties:
            RoleName: !Sub "lambda-role-${Module}-${UniqueIdentifier}"
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                          Service:
                              - lambda.amazonaws.com
                      Action:
                          - 'sts:AssumeRole'
            Policies:
                - PolicyName: !Sub "lambda-policy-${Module}-${UniqueIdentifier}"
                  PolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                          - Effect: Allow
                            Action:
                                - "s3:*"
                            Resource: !Sub "arn:aws:s3:::*"
                          -
                            Sid: "cwlog"
                            Effect: "Allow"
                            Action:
                                - "logs:*"
                                - "cloudwatch:*"
                            Resource: "*"
            Tags:
                - Key: "Environment"
                  Value: !Ref Environment
                - Key: "Module"
                  Value: !Ref Module
################################ API Gateway ###################################
    RestApi:
        Type: AWS::Serverless::Api
        Properties:
            StageName: !Sub "${Environment}-${UniqueIdentifier}"
            Tags:
                Environment: !Ref Environment
                Module: !Ref Module
    ApiKey:
        Type: AWS::ApiGateway::ApiKey
        Properties:
            Name: !Sub "api-key-${UniqueIdentifier}"
            Description: "API Key"
            Enabled: true
            Tags:
                - Key: "Environment"
                  Value: !Ref Environment
                - Key: "Module"
                  Value: !Ref Module
    ApiUsagePlan:
        Type: AWS::ApiGateway::UsagePlan
        Properties:
            ApiStages:
              - ApiId: !Ref RestApi
                Stage: !Ref RestApi.Stage
            Quota:
                Limit: 1000
                Period: MONTH
            Description: "Api usage plan for RestApi"
            UsagePlanName: !Sub "usage-plan-${UniqueIdentifier}"
            Throttle:
                BurstLimit: 600
                RateLimit: 600
    UsagePlanKey:
        Type: AWS::ApiGateway::UsagePlanKey
        Properties:
            KeyId: !Ref ApiKey
            KeyType: API_KEY
            UsagePlanId: !Ref ApiUsagePlan
################################ Glue ##########################################
    RefinedDb:
        Type: AWS::Glue::Database
        Properties:
            CatalogId: !Ref AWS::AccountId
            DatabaseInput:
                Name: !Sub "refined_${Module}_${UniqueIdentifier}"
                Description: !Sub "Refined Glue Database of stack ${AWS::StackName}"
################################ Output ########################################
Outputs:
    HttpApiUrl:
        Description: "URL of the API"
        Value: !Sub 'https://${RestApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/'
